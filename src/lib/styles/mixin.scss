@use 'src/lib/styles/animation' as animation;

%after-before {
  position: absolute;
  top: 0;
  left: 0;
  z-index: var(--neo-z-index-behind, -1);
  display: flex;
  width: 100%;
  height: 100%;
  border-radius: inherit;
  opacity: 0;
  content: '';
}

@mixin pulse(
  $box-shadow: var(--neo-pulse-box-shadow, var(--neo-box-shadow-raised-2)),
  $box-shadow-reverse: var(--neo-pulse-box-shadow-reverse, var(--neo-box-shadow-inset-1)),
  $duration: var(--neo-pulse-duration, 6s),
  $delay: var(--neo-pulse-delay, 1s),
  $interval: var(--neo-pulse-interval, 3s),
  $iteration: infinite,
  $scaleX: var(--neo-pulse-scale-x, 2),
  $scaleY: var(--neo-pulse-scale-y, 2),
  $opacity-start: 1,
  $opacity-end: 0
) {
  position: relative;

  &::after,
  &::before {
    @extend %after-before;

    box-shadow: $box-shadow;
    will-change: transform, opacity;
  }

  &::before {
    animation: pulse $duration linear $delay $iteration;
  }

  &::after {
    animation: pulse $duration linear calc(#{$delay} + #{$interval}) $iteration;
  }

  &.pressed,
  &:focus-visible,
  &:hover,
  &:active {
    &::after,
    &::before {
      box-shadow: $box-shadow-reverse;
      animation-name: coalesce;
      animation-timing-function: ease-out;
    }
  }

  @include animation.pulse($scaleX, $scaleY, $opacity-start, $opacity-end);
  @include animation.coalesce($scaleX, $scaleY, $opacity-start, $opacity-end);
}

@mixin coalesce(
  $box-shadow: var(--neo-coalesce-box-shadow, var(--neo-box-shadow-raised-2)),
  $box-shadow-reverse: var(--neo-coalesce-box-shadow-reverse, var(--neo-box-shadow-inset-1)),
  $duration: var(--neo-coalesce-duration, 6s),
  $delay: var(--neo-coalesce-delay, 1s),
  $interval: var(--neo-coalesce-interval, 3s),
  $iteration: infinite,
  $scaleX: var(--neo-coalesce-scale-x, 2),
  $scaleY: var(--neo-coalesce-scale-y, 2),
  $opacity-start: 1,
  $opacity-end: 0
) {
  position: relative;

  &::after,
  &::before {
    @extend %after-before;

    box-shadow: $box-shadow;
    will-change: transform, opacity;
  }

  &::before {
    animation: coalesce $duration ease-out $delay $iteration;
  }

  &::after {
    animation: coalesce $duration ease-out calc(#{$delay} + #{$interval}) $iteration;
  }

  &.pressed,
  &:focus-visible,
  &:hover,
  &:active {
    &::after,
    &::before {
      box-shadow: $box-shadow-reverse;
      animation-name: pulse;
      animation-timing-function: linear;
    }
  }

  @include animation.pulse($scaleX, $scaleY, $opacity-start, $opacity-end);
  @include animation.coalesce($scaleX, $scaleY, $opacity-start, $opacity-end);
}

@mixin border-rotate(
  $background-color: var(--neo-background-color),
  $border-color: var(--neo-border-color-primary),
  $border-width: 1px,
  $speed: 3s,
  $easing: linear,
  $transition: (
    1s --neo-source-color,
    1s --neo-target-color,
  )
) {
  --neo-source-color: #{$background-color};
  --neo-target-color: #{$border-color};

  background:
    linear-gradient($background-color, $background-color) padding-box,
    conic-gradient(from var(--neo-angle), var(--neo-source-color), var(--neo-target-color)) border-box;
  border: $border-width solid transparent;
  transition: $transition;
  animation: $speed rotate $easing infinite;

  &.filled {
    --neo-source-color: var(--neo-target-color);
  }

  &.empty {
    --neo-target-color: transparent;
  }

  @include animation.rotate;
}

@mixin border-progress(
  $background-color: var(--neo-background-color),
  $border-color: var(--neo-border-color-primary),
  $border-width: 1px,
  $transition: --neo-progress,
  $speed: 2s,
  $easing: var(--neo-transition-bezier)
) {
  background:
    linear-gradient($background-color, $background-color) padding-box,
    conic-gradient($border-color, $border-color var(--neo-progress), transparent var(--neo-progress)) border-box;
  border: $border-width solid transparent;
  transition: $transition $speed $easing;
}

@mixin skeleton(
  $color: var(--neo-skeleton-color),
  $timing: 3s,
  $easing: var(--neo-transition-skeleton),
  $delay: 1s,
  $step: var(--neo-skeleton-color-step, 0.05)
) {
  --neo-skeleton-color-start: #{$color};
  --neo-skeleton-color-end: oklch(from #{$color} calc(l - #{$step}) c h);

  color: var(--neo-skeleton-color-start);
  background-color: var(--neo-skeleton-color-start);
  border-color: var(--neo-skeleton-color-start);
  transition:
    background-color $delay ease,
    color $delay ease,
    border-color $delay ease;
  animation: skeleton $timing $easing infinite;
  animation-delay: $delay;

  &::before,
  &::after,
  :global(> *::before),
  :global(> *::after),
  :global(> *) {
    visibility: hidden;
    pointer-events: none;
  }

  @include animation.skeleton;
}
